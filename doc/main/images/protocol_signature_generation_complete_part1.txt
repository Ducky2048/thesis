title Login

actor Signer
actor Signing Service
actor Authenticator(IDP)

activate Signer
Signer->Signer: generate hash(es)
deactivate Signer
Signer->Signing Service: send hash(es)
activate Signing Service
Signing Service->Signing Service: generate seed
note right of Signing Service: seed is used for CSRF protection and\nto protect agains malicious IDP without\nrelying on client validation
Signing Service->Signing Service: calculate salt
note right of Signing Service: salt:\nHMAC((seed + secret), hash(es))\nIt is used to protect agains the IDP gaining knowledge\nabout signing the same documents\nand the receiver of the signature gaining knowlegede\nwhich documentes were signed together
Signing Service->Signing Service: generate IDP redirects
Signer<--Signing Service: return IDP choices, seed, salt
deactivate Signing Service
activate Signer
Signer->Signer: generate OIDC nonce
note right of Signer:OIDC nonce:\nHash(list(HMAC(salt, hash)))
Signer->Signer: choose IDP
Signer->Authenticator(IDP): follow redirect
deactivate Signer
Authenticator(IDP)->Signer: ask credentials
Signer->Authenticator(IDP): send credentials
activate Authenticator(IDP)
Authenticator(IDP)->Authenticator(IDP): validate credentials
Signer<--Authenticator(IDP): return ID token
deactivate Authenticator(IDP)
Signer->Signing Service: send ID token, hash(es), seed, salt
activate Signing Service
Signing Service->Signing Service: verify salt
Signing Service->Signing Service: verify OIDC nonce
Signing Service->Signing Service: verify ID token locally