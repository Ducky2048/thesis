!function(e){function t(t){for(var n,o,r=t[0],i=t[1],l=0,a=[];l<r.length;l++)o=r[l],Object.prototype.hasOwnProperty.call(s,o)&&s[o]&&a.push(s[o][0]),s[o]=0;for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n]);for(u&&u(t);a.length;)a.shift()()}var n={},s={0:0};var o={};var r={2:function(){return{"./index.js":{__wbindgen_throw:function(e,t){return n[1].exports.__wbindgen_throw(e,t)}}}}};function i(t){if(n[t])return n[t].exports;var s=n[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.e=function(e){var t=[],n=s[e];if(0!==n)if(n)t.push(n[2]);else{var l=new Promise((function(t,o){n=s[e]=[t,o]}));t.push(n[2]=l);var a,c=document.createElement("script");c.charset="utf-8",c.timeout=120,i.nc&&c.setAttribute("nonce",i.nc),c.src=function(e){return i.p+""+e+".bundle.js"}(e);var u=new Error;a=function(t){c.onerror=c.onload=null,clearTimeout(d);var n=s[e];if(0!==n){if(n){var o=t&&("load"===t.type?"missing":t.type),r=t&&t.target&&t.target.src;u.message="Loading chunk "+e+" failed.\n("+o+": "+r+")",u.name="ChunkLoadError",u.type=o,u.request=r,n[1](u)}s[e]=void 0}};var d=setTimeout((function(){a({type:"timeout",target:c})}),12e4);c.onerror=c.onload=a,document.head.appendChild(c)}return({1:[2]}[e]||[]).forEach((function(e){var n=o[e];if(n)t.push(n);else{var s,l=r[e](),a=fetch(i.p+""+{2:"0afeb1c764244eb13e40"}[e]+".module.wasm");if(l instanceof Promise&&"function"==typeof WebAssembly.compileStreaming)s=Promise.all([WebAssembly.compileStreaming(a),l]).then((function(e){return WebAssembly.instantiate(e[0],e[1])}));else if("function"==typeof WebAssembly.instantiateStreaming)s=WebAssembly.instantiateStreaming(a,l);else{s=a.then((function(e){return e.arrayBuffer()})).then((function(e){return WebAssembly.instantiate(e,l)}))}t.push(o[e]=s.then((function(t){return i.w[e]=(t.instance||t).exports})))}})),Promise.all(t)},i.m=e,i.c=n,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i.oe=function(e){throw console.error(e),e},i.w={};var l=window.webpackJsonp=window.webpackJsonp||[],a=l.push.bind(l);l.push=t,l=l.slice();for(var c=0;c<l.length;c++)t(l[c]);var u=a;i(i.s=0)}([function(e,t,n){"use strict";n.r(t);class s{static notNull(e){if(null==e)throw console.trace(this.nullmsg),new ReferenceError(this.nullmsg);return!0}static notUndefined(e){if(void 0===e)throw new ReferenceError(`Error: Object ${e} was undefined`);return!0}static notNullNotUndefined(e){return s.notNull(e)&&s.notUndefined(e)}}function o(e){const t=document.getElementById(e);if(null==t)throw new ReferenceError(`Error: Element with id "${e}" does not exist`);return t}s.nullmsg="Error: object was null";class r{static request(e,t,n,s,o,r){const i=new XMLHttpRequest,l=window.location.href.replace(window.location.pathname,"");i.open(e,`${l}/${t}`,!0),i.onload=function(){this.status>=200&&this.status<400?s&&s(JSON.parse(this.response)):o&&o(this.responseText)},i.onerror=function(e){o&&o(e)},"POST"===e&&null!=r&&i.setRequestHeader("Content-Type",r),i.send(n)}static requestPromise(e,t,n){return new Promise((s,o)=>{this.request(e,t,n,s,o)})}}class i{constructor(e){this.queue=Array(),this.started=!1,this.continuation=e}add(e){this.started?console.log("nope"):this.queue.push(()=>{const t=this.queue.pop();e(null!=t?t:this.continuation)})}start(){this.started=!0,this.queue.reverse();const e=this.queue.pop();null!=e&&e()}}class l{constructor(e,t,n,s){this.CHUNK_SIZE_IN_BYTES=2048e4,this.start=0,this.end=this.start+this.CHUNK_SIZE_IN_BYTES,this.numChunks=0,this.chunkCounter=0,this.inputFile=null,this.fileReader=new FileReader,this.fileReader.onload=this.getFileReadOnLoadHandler(),this.dataCallback=e,this.errorCallback=t,this.processingCompletedCallback=s,this.progressCallback=n}processChunks(e){this.inputFile=e,this.startTime=new Date,this.numChunks=Math.round(this.inputFile.size/this.CHUNK_SIZE_IN_BYTES),this.read(this.start,this.end)}getFileReadOnLoadHandler(){return()=>{s.notNull(this.inputFile)&&(this.dataCallback(new Uint8Array(this.fileReader.result)),this.start=this.end,this.end<this.inputFile.size?(this.chunkCounter++,this.end=this.start+this.CHUNK_SIZE_IN_BYTES,this.progressCallback(Math.round(this.chunkCounter/this.numChunks*100)),this.read(this.start,this.end)):this.processingCompletedCallback())}}read(e,t){s.notNull(this.inputFile)&&this.fileReader.readAsArrayBuffer(this.inputFile.slice(e,t))}}class a{static showSubmissionButton(e){const t=o("input-files-area");if(s.notNull(t)){t.innerHTML='<p class="lead">Hashing completed. Continue when ready</p>\n                         <button type="button" class="btn btn-block btn-outline-primary" id="submithashes">Submit for signing</button>';const n=o("submithashes");s.notNull(n)&&(n.onclick=t=>{this.submitHashes(e)})}}static submitHashes(e){r.request("POST","/api/v1/hashes/",JSON.stringify({hashes:e}),t=>{console.log(t);const n={postHashesResponse:t,hashes:e};window.localStorage.setItem("lolnogenerics",JSON.stringify(n)),this.showIdpLoginButtons(t)},e=>console.log(`error ${e}`),"application/json"),console.log(`POST ${e}`)}static showIdpLoginButtons(e){const t=o("input-files-area");if(console.log("fu1"),s.notNull(t)&&s.notNull(t.parentNode)){console.log("fu2");const n='<p class="lead">Please select whom to authenticate with</p>\n                         <a href="IDPURL" class="button btn btn-block btn-outline-primary">IDPNAME</a>';for(;t.children.length>0;)t.removeChild(t.children[0]);for(const s in e.providers){console.log("fu3");const o=document.createElement("div");o.innerHTML=n.replace("IDPURL",e.providers[s]).replace("IDPNAME",s),t.parentNode.insertBefore(o,t)}}}static progressCallbackBuilder(e,t){const n=o(`file.${t}`);return s.notNull(n)?t=>{n.innerHTML=this.renderCardTemplate(e,`${t}%`)}:e=>{console.log(`cardElement file.${t} was null, cannot update progress`)}}static processingCompletedBuilder(e,t,n,r,i){const l=o(`file.${r}`);return s.notNull(l)?()=>{const s=i.hex_digest();t.push(s),l.innerHTML=this.renderCardTemplate(n,s),e()}:()=>{console.log(`cardElement file.${r} was null, cannot update progress`)}}static renderCardTemplate(e,t){return'<div class="card mb-4 box-shadow">\n            <div class="card-header">\n                <h5 class="my-0 font-weight-normal">FILENAME</h5>\n            </div>\n            <div class="card-body">\n                <ul class="list-unstyled mt-3 mb-4">\n                    <li>Size: FILESIZE</li>\n                    <li>Type: FILETYPE</li>\n                    <li>Hash: FILEHASH</li>\n                </ul>\n\x3c!--                <button type="button" class="btn btn-block btn-danger">Remove file</button>--\x3e\n            </div>\n        </div>'.replace("FILENAME",e.name).replace("FILESIZE",e.size<1048576?`${Math.round(e.size/1024)} KB`:`${Math.round(e.size/1024/1024)} MB`).replace("FILETYPE",""!=e.type?e.type:"Unknown").replace("FILEHASH",t)}static getFilesFromElement(e){const t=o(e);if(s.notNull(t.files))return t.files.length<0?alert("Too few files selected. Please select at least one file."):this.updateFilesArea("Wait for hashing to finish"),t.files}static updateFilesArea(e){const t=o("input-files-area");s.notNull(t)&&(t.innerHTML=`<p class="lead">${e}</p>`)}static errorHandlingCallback(e){const t=o("error");t.innerHTML=`${t.innerHTML} <p>${e}</p>`}}class c{static handle(){const e=window.localStorage.getItem("lolnogenerics");if(s.notNull(e)){const t=JSON.parse(e),n={idtoken:this.getIdTokenFromGetParameters(),seed:t.postHashesResponse.seed,salt:t.postHashesResponse.salt,hashes:t.hashes};r.request("POST","/api/v1/sign",JSON.stringify(n),e=>{console.log(e)},e=>console.log("error "+e),"application/json")}}static getIdTokenFromGetParameters(){const e=window.location.href.split("#")[1].split("&");for(const t of e){const e=t.split("=");if("id_token"==e[0])return e[1]}const t="Found no id_token in url";throw console.trace(t),new Error(t)}}var u=function(e,t,n,s){return new(n||(n=Promise))((function(o,r){function i(e){try{a(s.next(e))}catch(e){r(e)}}function l(e){try{a(s.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}a((s=s.apply(e,t||[])).next())}))};function d(e){const t=document.getElementById("process-file");s.notNull(t)&&(t.onclick=function(){!function(e){const t=a.getFilesFromElement("file"),n=new Array,r=new i(()=>{a.showSubmissionButton(n)});if(s.notNullNotUndefined(t)){for(let i=0;i<t.length;i++){const c=t[i],u=o("cardarea");if(s.notNullNotUndefined(u)){const e=document.createElement("div");e.id=`file.${i}`,e.innerHTML=a.renderCardTemplate(c,"Queued"),s.notNull(u.parentNode)&&u.parentNode.insertBefore(e,u)}r.add(s=>{new l(t=>{e.update(new Uint8Array(t))},a.errorHandlingCallback,a.progressCallbackBuilder(c,i),a.processingCompletedBuilder(s,n,c,i,e)).processChunks(t[i])})}r.start()}}(new e.Sha256hasher)})}!function(){u(this,void 0,void 0,(function*(){document.location.pathname.includes("index")?d(yield n.e(1).then(n.bind(null,1))):document.location.pathname.includes("callback")&&c.handle()}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,