// Code generated by protoc-gen-go. DO NOT EDIT.
// source: signature.proto

package verifier

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MACAlgorithm int32

const (
	MACAlgorithm_HMAC_SHA2_256 MACAlgorithm = 0
	MACAlgorithm_HMAC_SHA2_512 MACAlgorithm = 1
	MACAlgorithm_HMAC_SHA3_256 MACAlgorithm = 2
	MACAlgorithm_HMAC_SHA3_512 MACAlgorithm = 3
	MACAlgorithm_POLY1305_AES  MACAlgorithm = 4
)

var MACAlgorithm_name = map[int32]string{
	0: "HMAC_SHA2_256",
	1: "HMAC_SHA2_512",
	2: "HMAC_SHA3_256",
	3: "HMAC_SHA3_512",
	4: "POLY1305_AES",
}
var MACAlgorithm_value = map[string]int32{
	"HMAC_SHA2_256": 0,
	"HMAC_SHA2_512": 1,
	"HMAC_SHA3_256": 2,
	"HMAC_SHA3_512": 3,
	"POLY1305_AES":  4,
}

func (x MACAlgorithm) String() string {
	return proto.EnumName(MACAlgorithm_name, int32(x))
}
func (MACAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_signature_cafafff28c445760, []int{0}
}

type HashAlgorithm int32

const (
	HashAlgorithm_SHA2_256 HashAlgorithm = 0
	HashAlgorithm_SHA2_512 HashAlgorithm = 1
	HashAlgorithm_SHA3_256 HashAlgorithm = 2
	HashAlgorithm_SHA3_512 HashAlgorithm = 3
)

var HashAlgorithm_name = map[int32]string{
	0: "SHA2_256",
	1: "SHA2_512",
	2: "SHA3_256",
	3: "SHA3_512",
}
var HashAlgorithm_value = map[string]int32{
	"SHA2_256": 0,
	"SHA2_512": 1,
	"SHA3_256": 2,
	"SHA3_512": 3,
}

func (x HashAlgorithm) String() string {
	return proto.EnumName(HashAlgorithm_name, int32(x))
}
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_signature_cafafff28c445760, []int{1}
}

type SignatureLevel int32

const (
	SignatureLevel_ADVANCED  SignatureLevel = 0
	SignatureLevel_QUALIFIED SignatureLevel = 1
)

var SignatureLevel_name = map[int32]string{
	0: "ADVANCED",
	1: "QUALIFIED",
}
var SignatureLevel_value = map[string]int32{
	"ADVANCED":  0,
	"QUALIFIED": 1,
}

func (x SignatureLevel) String() string {
	return proto.EnumName(SignatureLevel_name, int32(x))
}
func (SignatureLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_signature_cafafff28c445760, []int{2}
}

type SignatureData struct {
	SaltedDocumentHash [][]byte       `protobuf:"bytes,1,rep,name=salted_document_hash,json=saltedDocumentHash,proto3" json:"salted_document_hash,omitempty"`
	HashAlgorithm      HashAlgorithm  `protobuf:"varint,2,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=HashAlgorithm" json:"hash_algorithm,omitempty"`
	MacKey             []byte         `protobuf:"bytes,3,opt,name=mac_key,json=macKey,proto3" json:"mac_key,omitempty"`
	MacAlgorithm       MACAlgorithm   `protobuf:"varint,4,opt,name=mac_algorithm,json=macAlgorithm,proto3,enum=MACAlgorithm" json:"mac_algorithm,omitempty"`
	SignatureLevel     SignatureLevel `protobuf:"varint,5,opt,name=signature_level,json=signatureLevel,proto3,enum=SignatureLevel" json:"signature_level,omitempty"`
	IdToken            []byte         `protobuf:"bytes,6,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
	JwkIdp             [][]byte       `protobuf:"bytes,7,rep,name=jwk_idp,json=jwkIdp,proto3" json:"jwk_idp,omitempty"`
	// maps the fingerprint of the jwk cert to its ltv information
	LtvIdp               map[string]*LTV `protobuf:"bytes,8,rep,name=ltv_idp,json=ltvIdp,proto3" json:"ltv_idp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SignatureData) Reset()         { *m = SignatureData{} }
func (m *SignatureData) String() string { return proto.CompactTextString(m) }
func (*SignatureData) ProtoMessage()    {}
func (*SignatureData) Descriptor() ([]byte, []int) {
	return fileDescriptor_signature_cafafff28c445760, []int{0}
}
func (m *SignatureData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureData.Unmarshal(m, b)
}
func (m *SignatureData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureData.Marshal(b, m, deterministic)
}
func (dst *SignatureData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureData.Merge(dst, src)
}
func (m *SignatureData) XXX_Size() int {
	return xxx_messageInfo_SignatureData.Size(m)
}
func (m *SignatureData) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureData.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureData proto.InternalMessageInfo

func (m *SignatureData) GetSaltedDocumentHash() [][]byte {
	if m != nil {
		return m.SaltedDocumentHash
	}
	return nil
}

func (m *SignatureData) GetHashAlgorithm() HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return HashAlgorithm_SHA2_256
}

func (m *SignatureData) GetMacKey() []byte {
	if m != nil {
		return m.MacKey
	}
	return nil
}

func (m *SignatureData) GetMacAlgorithm() MACAlgorithm {
	if m != nil {
		return m.MacAlgorithm
	}
	return MACAlgorithm_HMAC_SHA2_256
}

func (m *SignatureData) GetSignatureLevel() SignatureLevel {
	if m != nil {
		return m.SignatureLevel
	}
	return SignatureLevel_ADVANCED
}

func (m *SignatureData) GetIdToken() []byte {
	if m != nil {
		return m.IdToken
	}
	return nil
}

func (m *SignatureData) GetJwkIdp() [][]byte {
	if m != nil {
		return m.JwkIdp
	}
	return nil
}

func (m *SignatureData) GetLtvIdp() map[string]*LTV {
	if m != nil {
		return m.LtvIdp
	}
	return nil
}

type LTV struct {
	Ocsp                 []byte   `protobuf:"bytes,1,opt,name=ocsp,proto3" json:"ocsp,omitempty"`
	Crl                  []byte   `protobuf:"bytes,2,opt,name=crl,proto3" json:"crl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LTV) Reset()         { *m = LTV{} }
func (m *LTV) String() string { return proto.CompactTextString(m) }
func (*LTV) ProtoMessage()    {}
func (*LTV) Descriptor() ([]byte, []int) {
	return fileDescriptor_signature_cafafff28c445760, []int{1}
}
func (m *LTV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LTV.Unmarshal(m, b)
}
func (m *LTV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LTV.Marshal(b, m, deterministic)
}
func (dst *LTV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LTV.Merge(dst, src)
}
func (m *LTV) XXX_Size() int {
	return xxx_messageInfo_LTV.Size(m)
}
func (m *LTV) XXX_DiscardUnknown() {
	xxx_messageInfo_LTV.DiscardUnknown(m)
}

var xxx_messageInfo_LTV proto.InternalMessageInfo

func (m *LTV) GetOcsp() []byte {
	if m != nil {
		return m.Ocsp
	}
	return nil
}

func (m *LTV) GetCrl() []byte {
	if m != nil {
		return m.Crl
	}
	return nil
}

type SignatureFile struct {
	// pkcs7 enveloped and signed,
	// containing CA chain,
	// and if ltv is enabled CRL and OCSP as well
	SignatureDataInPkcs7 []byte `protobuf:"bytes,1,opt,name=signature_data_in_pkcs7,json=signatureDataInPkcs7,proto3" json:"signature_data_in_pkcs7,omitempty"`
	// pkcs7 enveloped rfc3161 timestamp (not signed, just enveloped)
	// along with CA chain
	// and if ltv is enabled CRL and OCSP as well
	// each later timestamp authenticates a former one
	// thus forming a chain for archival
	Rfc3161InPkcs7       [][]byte `protobuf:"bytes,2,rep,name=rfc3161_in_pkcs7,json=rfc3161InPkcs7,proto3" json:"rfc3161_in_pkcs7,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignatureFile) Reset()         { *m = SignatureFile{} }
func (m *SignatureFile) String() string { return proto.CompactTextString(m) }
func (*SignatureFile) ProtoMessage()    {}
func (*SignatureFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_signature_cafafff28c445760, []int{2}
}
func (m *SignatureFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureFile.Unmarshal(m, b)
}
func (m *SignatureFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureFile.Marshal(b, m, deterministic)
}
func (dst *SignatureFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureFile.Merge(dst, src)
}
func (m *SignatureFile) XXX_Size() int {
	return xxx_messageInfo_SignatureFile.Size(m)
}
func (m *SignatureFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureFile.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureFile proto.InternalMessageInfo

func (m *SignatureFile) GetSignatureDataInPkcs7() []byte {
	if m != nil {
		return m.SignatureDataInPkcs7
	}
	return nil
}

func (m *SignatureFile) GetRfc3161InPkcs7() [][]byte {
	if m != nil {
		return m.Rfc3161InPkcs7
	}
	return nil
}

func init() {
	proto.RegisterType((*SignatureData)(nil), "SignatureData")
	proto.RegisterMapType((map[string]*LTV)(nil), "SignatureData.LtvIdpEntry")
	proto.RegisterType((*LTV)(nil), "LTV")
	proto.RegisterType((*SignatureFile)(nil), "SignatureFile")
	proto.RegisterEnum("MACAlgorithm", MACAlgorithm_name, MACAlgorithm_value)
	proto.RegisterEnum("HashAlgorithm", HashAlgorithm_name, HashAlgorithm_value)
	proto.RegisterEnum("SignatureLevel", SignatureLevel_name, SignatureLevel_value)
}

func init() { proto.RegisterFile("signature.proto", fileDescriptor_signature_cafafff28c445760) }

var fileDescriptor_signature_cafafff28c445760 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x53, 0xd1, 0x8e, 0x9a, 0x40,
	0x14, 0x5d, 0xc4, 0x55, 0xf7, 0x0a, 0x2c, 0x9d, 0x6c, 0xb2, 0xd4, 0x27, 0xe3, 0x13, 0xb1, 0x29,
	0x59, 0x31, 0x6e, 0x37, 0x7d, 0x69, 0xa8, 0xba, 0xd5, 0x94, 0x6d, 0xb7, 0x68, 0x4d, 0xda, 0x97,
	0xc9, 0x14, 0x66, 0x57, 0x56, 0x04, 0x02, 0xa3, 0x1b, 0x3f, 0xa9, 0x7f, 0xd9, 0xcc, 0xa8, 0x15,
	0xde, 0xee, 0x39, 0xe7, 0xde, 0xc3, 0x9c, 0x3b, 0x03, 0x5c, 0xe6, 0xe1, 0x73, 0x4c, 0xd8, 0x26,
	0xa3, 0x56, 0x9a, 0x25, 0x2c, 0xe9, 0xfc, 0x95, 0x41, 0x9d, 0x1d, 0xb9, 0x11, 0x61, 0x04, 0xdd,
	0xc0, 0x55, 0x4e, 0x22, 0x46, 0x03, 0x1c, 0x24, 0xfe, 0x66, 0x4d, 0x63, 0x86, 0x97, 0x24, 0x5f,
	0x1a, 0x52, 0x5b, 0x36, 0x15, 0x0f, 0xed, 0xb5, 0xd1, 0x41, 0x9a, 0x90, 0x7c, 0x89, 0x06, 0xa0,
	0xf1, 0x0e, 0x4c, 0xa2, 0xe7, 0x24, 0x0b, 0xd9, 0x72, 0x6d, 0x54, 0xda, 0x92, 0xa9, 0xd9, 0x9a,
	0xc5, 0x65, 0xe7, 0xc8, 0x7a, 0xea, 0xb2, 0x08, 0xd1, 0x35, 0xd4, 0xd7, 0xc4, 0xc7, 0x2b, 0xba,
	0x33, 0xe4, 0xb6, 0x64, 0x2a, 0x5e, 0x6d, 0x4d, 0xfc, 0xaf, 0x74, 0x87, 0x6c, 0x50, 0xb9, 0x70,
	0xb2, 0xab, 0x0a, 0x3b, 0xd5, 0x7a, 0x70, 0x86, 0x27, 0x37, 0x65, 0x4d, 0xfc, 0x93, 0xd9, 0x5d,
	0x21, 0x1a, 0x8e, 0xe8, 0x96, 0x46, 0xc6, 0xb9, 0x98, 0xba, 0xb4, 0xfe, 0xc7, 0x73, 0x39, 0xed,
	0x69, 0x79, 0x09, 0xa3, 0xb7, 0xd0, 0x08, 0x03, 0xcc, 0x92, 0x15, 0x8d, 0x8d, 0x9a, 0x38, 0x47,
	0x3d, 0x0c, 0xe6, 0x1c, 0xf2, 0x13, 0xbe, 0xbc, 0xae, 0x70, 0x18, 0xa4, 0x46, 0x5d, 0xa4, 0xaf,
	0xbd, 0xbc, 0xae, 0xa6, 0x41, 0x8a, 0xfa, 0x50, 0x8f, 0xd8, 0x56, 0x08, 0x8d, 0xb6, 0x6c, 0x36,
	0xed, 0x96, 0x55, 0x5a, 0xa2, 0xe5, 0xb2, 0xed, 0x34, 0x48, 0xc7, 0x31, 0xcb, 0x76, 0x5e, 0x2d,
	0x12, 0xa0, 0xf5, 0x09, 0x9a, 0x05, 0x1a, 0xe9, 0x20, 0xf3, 0xe8, 0x52, 0x5b, 0x32, 0x2f, 0x3c,
	0x5e, 0xa2, 0x16, 0x9c, 0x6f, 0x49, 0xb4, 0xa1, 0x62, 0x7d, 0x4d, 0xbb, 0x6a, 0xb9, 0xf3, 0x85,
	0xb7, 0xa7, 0x3e, 0x56, 0xee, 0xa4, 0xce, 0x3b, 0x90, 0xdd, 0xf9, 0x02, 0x21, 0xa8, 0x26, 0x7e,
	0x9e, 0x8a, 0x49, 0xc5, 0x13, 0x35, 0x37, 0xf3, 0xb3, 0x48, 0x0c, 0x2a, 0x1e, 0x2f, 0x3b, 0x69,
	0xe1, 0x5e, 0xef, 0xc3, 0x88, 0xa2, 0x01, 0x5c, 0x9f, 0x36, 0x14, 0x10, 0x46, 0x70, 0x18, 0xe3,
	0x74, 0xe5, 0xe7, 0x1f, 0x0e, 0x4e, 0x57, 0x79, 0x31, 0xc2, 0x34, 0x7e, 0xe4, 0x1a, 0x32, 0x41,
	0xcf, 0x9e, 0xfc, 0x7e, 0xef, 0xb6, 0x77, 0xea, 0xaf, 0x88, 0x65, 0x68, 0x07, 0xfe, 0xd0, 0xd9,
	0x8d, 0x40, 0x29, 0x5e, 0x10, 0x7a, 0x03, 0xea, 0xe4, 0xc1, 0x19, 0xe2, 0xd9, 0xc4, 0xb1, 0xb1,
	0x3d, 0xb8, 0xd5, 0xcf, 0xca, 0xd4, 0xa0, 0x67, 0xeb, 0x52, 0x91, 0xea, 0x8b, 0xae, 0x4a, 0x99,
	0xe2, 0x5d, 0x32, 0xd2, 0x41, 0x79, 0xfc, 0xee, 0xfe, 0xea, 0xf5, 0x6f, 0x06, 0xd8, 0x19, 0xcf,
	0xf4, 0x6a, 0xf7, 0x0b, 0xa8, 0xa5, 0xd7, 0x85, 0x14, 0x68, 0x14, 0xbe, 0x74, 0x44, 0xfb, 0x8f,
	0xec, 0xd1, 0xd1, 0xff, 0x88, 0x84, 0x75, 0xf7, 0x3d, 0x68, 0xe5, 0x17, 0xc2, 0x75, 0x67, 0xb4,
	0x70, 0xbe, 0x0d, 0xc7, 0x23, 0xfd, 0x0c, 0xa9, 0x70, 0xf1, 0xe3, 0xa7, 0xe3, 0x4e, 0xef, 0xa7,
	0xe3, 0x91, 0x2e, 0x7d, 0x86, 0xdf, 0x8d, 0x2d, 0xcd, 0xc2, 0xa7, 0x90, 0x66, 0x7f, 0x6a, 0xe2,
	0x1f, 0xea, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x6d, 0x4d, 0x9e, 0x56, 0x03, 0x00, 0x00,
}
