// Code generated by protoc-gen-go. DO NOT EDIT.
// source: signature.proto

package verifier

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MAC int32

const (
	MAC_HMAC_SHA2_256 MAC = 0
	MAC_HMAC_SHA2_512 MAC = 1
	MAC_HMAC_SHA3_256 MAC = 2
	MAC_HMAC_SHA3_512 MAC = 3
	MAC_POLY1305_AES  MAC = 4
)

var MAC_name = map[int32]string{
	0: "HMAC_SHA2_256",
	1: "HMAC_SHA2_512",
	2: "HMAC_SHA3_256",
	3: "HMAC_SHA3_512",
	4: "POLY1305_AES",
}
var MAC_value = map[string]int32{
	"HMAC_SHA2_256": 0,
	"HMAC_SHA2_512": 1,
	"HMAC_SHA3_256": 2,
	"HMAC_SHA3_512": 3,
	"POLY1305_AES":  4,
}

func (x MAC) String() string {
	return proto.EnumName(MAC_name, int32(x))
}
func (MAC) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_signature_f188cd95ff26aacf, []int{0}
}

type HashAlgorithm int32

const (
	HashAlgorithm_SHA2_256 HashAlgorithm = 0
	HashAlgorithm_SHA2_512 HashAlgorithm = 1
	HashAlgorithm_SHA3_256 HashAlgorithm = 2
	HashAlgorithm_SHA3_512 HashAlgorithm = 3
)

var HashAlgorithm_name = map[int32]string{
	0: "SHA2_256",
	1: "SHA2_512",
	2: "SHA3_256",
	3: "SHA3_512",
}
var HashAlgorithm_value = map[string]int32{
	"SHA2_256": 0,
	"SHA2_512": 1,
	"SHA3_256": 2,
	"SHA3_512": 3,
}

func (x HashAlgorithm) String() string {
	return proto.EnumName(HashAlgorithm_name, int32(x))
}
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_signature_f188cd95ff26aacf, []int{1}
}

type SignatureLevel int32

const (
	SignatureLevel_ADVANCED  SignatureLevel = 0
	SignatureLevel_QUALIFIED SignatureLevel = 1
)

var SignatureLevel_name = map[int32]string{
	0: "ADVANCED",
	1: "QUALIFIED",
}
var SignatureLevel_value = map[string]int32{
	"ADVANCED":  0,
	"QUALIFIED": 1,
}

func (x SignatureLevel) String() string {
	return proto.EnumName(SignatureLevel_name, int32(x))
}
func (SignatureLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_signature_f188cd95ff26aacf, []int{2}
}

type SignatureData struct {
	DocumentHash         []byte          `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	HashAlgorithm        HashAlgorithm   `protobuf:"varint,2,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=HashAlgorithm" json:"hash_algorithm,omitempty"`
	MacKey               []byte          `protobuf:"bytes,3,opt,name=mac_key,json=macKey,proto3" json:"mac_key,omitempty"`
	Mac                  MAC             `protobuf:"varint,4,opt,name=mac,proto3,enum=MAC" json:"mac,omitempty"`
	OtherMacs            [][]byte        `protobuf:"bytes,5,rep,name=other_macs,json=otherMacs,proto3" json:"other_macs,omitempty"`
	SignatureLevel       SignatureLevel  `protobuf:"varint,6,opt,name=signature_level,json=signatureLevel,proto3,enum=SignatureLevel" json:"signature_level,omitempty"`
	IdToken              []byte          `protobuf:"bytes,7,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
	X509Idp              [][]byte        `protobuf:"bytes,8,rep,name=x509_idp,json=x509Idp,proto3" json:"x509_idp,omitempty"`
	LtvIdp               map[string]*LTV `protobuf:"bytes,9,rep,name=ltv_idp,json=ltvIdp,proto3" json:"ltv_idp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SignatureData) Reset()         { *m = SignatureData{} }
func (m *SignatureData) String() string { return proto.CompactTextString(m) }
func (*SignatureData) ProtoMessage()    {}
func (*SignatureData) Descriptor() ([]byte, []int) {
	return fileDescriptor_signature_f188cd95ff26aacf, []int{0}
}
func (m *SignatureData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureData.Unmarshal(m, b)
}
func (m *SignatureData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureData.Marshal(b, m, deterministic)
}
func (dst *SignatureData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureData.Merge(dst, src)
}
func (m *SignatureData) XXX_Size() int {
	return xxx_messageInfo_SignatureData.Size(m)
}
func (m *SignatureData) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureData.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureData proto.InternalMessageInfo

func (m *SignatureData) GetDocumentHash() []byte {
	if m != nil {
		return m.DocumentHash
	}
	return nil
}

func (m *SignatureData) GetHashAlgorithm() HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return HashAlgorithm_SHA2_256
}

func (m *SignatureData) GetMacKey() []byte {
	if m != nil {
		return m.MacKey
	}
	return nil
}

func (m *SignatureData) GetMac() MAC {
	if m != nil {
		return m.Mac
	}
	return MAC_HMAC_SHA2_256
}

func (m *SignatureData) GetOtherMacs() [][]byte {
	if m != nil {
		return m.OtherMacs
	}
	return nil
}

func (m *SignatureData) GetSignatureLevel() SignatureLevel {
	if m != nil {
		return m.SignatureLevel
	}
	return SignatureLevel_ADVANCED
}

func (m *SignatureData) GetIdToken() []byte {
	if m != nil {
		return m.IdToken
	}
	return nil
}

func (m *SignatureData) GetX509Idp() [][]byte {
	if m != nil {
		return m.X509Idp
	}
	return nil
}

func (m *SignatureData) GetLtvIdp() map[string]*LTV {
	if m != nil {
		return m.LtvIdp
	}
	return nil
}

type Timestamped struct {
	Rfc3161Timestamp     []byte          `protobuf:"bytes,1,opt,name=rfc3161_timestamp,json=rfc3161Timestamp,proto3" json:"rfc3161_timestamp,omitempty"`
	LtvTimestamp         map[string]*LTV `protobuf:"bytes,2,rep,name=ltv_timestamp,json=ltvTimestamp,proto3" json:"ltv_timestamp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Timestamped) Reset()         { *m = Timestamped{} }
func (m *Timestamped) String() string { return proto.CompactTextString(m) }
func (*Timestamped) ProtoMessage()    {}
func (*Timestamped) Descriptor() ([]byte, []int) {
	return fileDescriptor_signature_f188cd95ff26aacf, []int{1}
}
func (m *Timestamped) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timestamped.Unmarshal(m, b)
}
func (m *Timestamped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timestamped.Marshal(b, m, deterministic)
}
func (dst *Timestamped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamped.Merge(dst, src)
}
func (m *Timestamped) XXX_Size() int {
	return xxx_messageInfo_Timestamped.Size(m)
}
func (m *Timestamped) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamped.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamped proto.InternalMessageInfo

func (m *Timestamped) GetRfc3161Timestamp() []byte {
	if m != nil {
		return m.Rfc3161Timestamp
	}
	return nil
}

func (m *Timestamped) GetLtvTimestamp() map[string]*LTV {
	if m != nil {
		return m.LtvTimestamp
	}
	return nil
}

type SignatureContainer struct {
	EnvelopedSignatureDataPkcs7 []byte          `protobuf:"bytes,1,opt,name=enveloped_signature_data_pkcs7,json=envelopedSignatureDataPkcs7,proto3" json:"enveloped_signature_data_pkcs7,omitempty"`
	LtvSigning                  map[string]*LTV `protobuf:"bytes,2,rep,name=ltv_signing,json=ltvSigning,proto3" json:"ltv_signing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral        struct{}        `json:"-"`
	XXX_unrecognized            []byte          `json:"-"`
	XXX_sizecache               int32           `json:"-"`
}

func (m *SignatureContainer) Reset()         { *m = SignatureContainer{} }
func (m *SignatureContainer) String() string { return proto.CompactTextString(m) }
func (*SignatureContainer) ProtoMessage()    {}
func (*SignatureContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_signature_f188cd95ff26aacf, []int{2}
}
func (m *SignatureContainer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureContainer.Unmarshal(m, b)
}
func (m *SignatureContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureContainer.Marshal(b, m, deterministic)
}
func (dst *SignatureContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureContainer.Merge(dst, src)
}
func (m *SignatureContainer) XXX_Size() int {
	return xxx_messageInfo_SignatureContainer.Size(m)
}
func (m *SignatureContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureContainer.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureContainer proto.InternalMessageInfo

func (m *SignatureContainer) GetEnvelopedSignatureDataPkcs7() []byte {
	if m != nil {
		return m.EnvelopedSignatureDataPkcs7
	}
	return nil
}

func (m *SignatureContainer) GetLtvSigning() map[string]*LTV {
	if m != nil {
		return m.LtvSigning
	}
	return nil
}

type LTV struct {
	Ocsp                 []byte   `protobuf:"bytes,1,opt,name=ocsp,proto3" json:"ocsp,omitempty"`
	Crl                  []byte   `protobuf:"bytes,2,opt,name=crl,proto3" json:"crl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LTV) Reset()         { *m = LTV{} }
func (m *LTV) String() string { return proto.CompactTextString(m) }
func (*LTV) ProtoMessage()    {}
func (*LTV) Descriptor() ([]byte, []int) {
	return fileDescriptor_signature_f188cd95ff26aacf, []int{3}
}
func (m *LTV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LTV.Unmarshal(m, b)
}
func (m *LTV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LTV.Marshal(b, m, deterministic)
}
func (dst *LTV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LTV.Merge(dst, src)
}
func (m *LTV) XXX_Size() int {
	return xxx_messageInfo_LTV.Size(m)
}
func (m *LTV) XXX_DiscardUnknown() {
	xxx_messageInfo_LTV.DiscardUnknown(m)
}

var xxx_messageInfo_LTV proto.InternalMessageInfo

func (m *LTV) GetOcsp() []byte {
	if m != nil {
		return m.Ocsp
	}
	return nil
}

func (m *LTV) GetCrl() []byte {
	if m != nil {
		return m.Crl
	}
	return nil
}

type SignatureFile struct {
	SignatureContainer   *SignatureContainer `protobuf:"bytes,1,opt,name=signature_container,json=signatureContainer,proto3" json:"signature_container,omitempty"`
	Timestamps           []*Timestamped      `protobuf:"bytes,2,rep,name=timestamps,proto3" json:"timestamps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SignatureFile) Reset()         { *m = SignatureFile{} }
func (m *SignatureFile) String() string { return proto.CompactTextString(m) }
func (*SignatureFile) ProtoMessage()    {}
func (*SignatureFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_signature_f188cd95ff26aacf, []int{4}
}
func (m *SignatureFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureFile.Unmarshal(m, b)
}
func (m *SignatureFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureFile.Marshal(b, m, deterministic)
}
func (dst *SignatureFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureFile.Merge(dst, src)
}
func (m *SignatureFile) XXX_Size() int {
	return xxx_messageInfo_SignatureFile.Size(m)
}
func (m *SignatureFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureFile.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureFile proto.InternalMessageInfo

func (m *SignatureFile) GetSignatureContainer() *SignatureContainer {
	if m != nil {
		return m.SignatureContainer
	}
	return nil
}

func (m *SignatureFile) GetTimestamps() []*Timestamped {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func init() {
	proto.RegisterType((*SignatureData)(nil), "SignatureData")
	proto.RegisterMapType((map[string]*LTV)(nil), "SignatureData.LtvIdpEntry")
	proto.RegisterType((*Timestamped)(nil), "Timestamped")
	proto.RegisterMapType((map[string]*LTV)(nil), "Timestamped.LtvTimestampEntry")
	proto.RegisterType((*SignatureContainer)(nil), "SignatureContainer")
	proto.RegisterMapType((map[string]*LTV)(nil), "SignatureContainer.LtvSigningEntry")
	proto.RegisterType((*LTV)(nil), "LTV")
	proto.RegisterType((*SignatureFile)(nil), "SignatureFile")
	proto.RegisterEnum("MAC", MAC_name, MAC_value)
	proto.RegisterEnum("HashAlgorithm", HashAlgorithm_name, HashAlgorithm_value)
	proto.RegisterEnum("SignatureLevel", SignatureLevel_name, SignatureLevel_value)
}

func init() { proto.RegisterFile("signature.proto", fileDescriptor_signature_f188cd95ff26aacf) }

var fileDescriptor_signature_f188cd95ff26aacf = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0xc5, 0x71, 0xc8, 0xc7, 0x8d, 0x1d, 0xcc, 0x20, 0xbd, 0xe7, 0x97, 0xa7, 0x87, 0x22, 0xd8,
	0x44, 0xf0, 0x6a, 0x11, 0x47, 0xa1, 0xb4, 0x9b, 0xca, 0x75, 0x42, 0x89, 0x9a, 0xb4, 0xd4, 0x49,
	0x91, 0xda, 0x8d, 0x35, 0xb5, 0x07, 0x62, 0xe1, 0x2f, 0xd9, 0x43, 0x54, 0xd6, 0xfd, 0x25, 0xfd,
	0x33, 0xfd, 0x25, 0xfd, 0x21, 0xd5, 0x4c, 0x62, 0x63, 0x97, 0xae, 0xd8, 0xcd, 0x39, 0xf7, 0xfa,
	0xcc, 0x3d, 0xe7, 0xca, 0x03, 0x3b, 0xa9, 0x77, 0x13, 0x62, 0x7a, 0x97, 0x10, 0x2d, 0x4e, 0x22,
	0x1a, 0x1d, 0x7c, 0x17, 0x41, 0x9e, 0x67, 0xdc, 0x08, 0x53, 0x8c, 0x0e, 0x41, 0x76, 0x23, 0xe7,
	0x2e, 0x20, 0x21, 0xb5, 0x97, 0x38, 0x5d, 0xaa, 0x42, 0x57, 0xe8, 0x49, 0x96, 0x94, 0x91, 0x17,
	0x38, 0x5d, 0xa2, 0x21, 0xb4, 0x59, 0xcd, 0xc6, 0xfe, 0x4d, 0x94, 0x78, 0x74, 0x19, 0xa8, 0x95,
	0xae, 0xd0, 0x6b, 0xeb, 0x6d, 0x8d, 0x95, 0x8d, 0x8c, 0xb5, 0xe4, 0x65, 0x11, 0xa2, 0xbf, 0xa1,
	0x1e, 0x60, 0xc7, 0xbe, 0x25, 0xf7, 0xaa, 0xc8, 0x55, 0x6b, 0x01, 0x76, 0xde, 0x92, 0x7b, 0xf4,
	0x17, 0x88, 0x01, 0x76, 0xd4, 0x2a, 0x17, 0xa9, 0x6a, 0x33, 0xc3, 0xb4, 0x18, 0x81, 0xfe, 0x03,
	0x88, 0xe8, 0x92, 0x24, 0x76, 0x80, 0x9d, 0x54, 0xdd, 0xee, 0x8a, 0x3d, 0xc9, 0x6a, 0x72, 0x66,
	0x86, 0x9d, 0x14, 0x9d, 0x15, 0x0c, 0xd9, 0x3e, 0x59, 0x11, 0x5f, 0xad, 0x71, 0x89, 0x1d, 0x2d,
	0x37, 0x35, 0x65, 0xb4, 0xd5, 0x4e, 0x4b, 0x18, 0xfd, 0x03, 0x0d, 0xcf, 0xb5, 0x69, 0x74, 0x4b,
	0x42, 0xb5, 0xce, 0x47, 0xa9, 0x7b, 0xee, 0x82, 0x41, 0x56, 0xfa, 0x3a, 0x3c, 0x79, 0x61, 0x7b,
	0x6e, 0xac, 0x36, 0xf8, 0x8d, 0x75, 0x86, 0x27, 0x6e, 0x8c, 0x06, 0x50, 0xf7, 0xe9, 0x8a, 0x57,
	0x9a, 0x5d, 0xb1, 0xd7, 0xd2, 0x3b, 0x5a, 0x29, 0x3c, 0x6d, 0x4a, 0x57, 0x13, 0x37, 0x1e, 0x87,
	0x34, 0xb9, 0xb7, 0x6a, 0x3e, 0x07, 0x9d, 0x57, 0xd0, 0x2a, 0xd0, 0x48, 0x01, 0x91, 0xf9, 0x67,
	0xa9, 0x36, 0x2d, 0x76, 0x44, 0x1d, 0xd8, 0x5e, 0x61, 0xff, 0x8e, 0xf0, 0x0c, 0x5b, 0x7a, 0x55,
	0x9b, 0x2e, 0xae, 0xac, 0x35, 0xf5, 0xb2, 0x72, 0x26, 0x1c, 0xfc, 0x10, 0xa0, 0xb5, 0xf0, 0x02,
	0x92, 0x52, 0x1c, 0xc4, 0xc4, 0x45, 0xc7, 0xb0, 0x9b, 0x5c, 0x3b, 0x83, 0xfe, 0x69, 0xdf, 0xa6,
	0x19, 0xbd, 0xd9, 0x92, 0xb2, 0x29, 0xe4, 0xed, 0xc8, 0x04, 0x99, 0x8d, 0xfc, 0xd0, 0x58, 0xe1,
	0x83, 0xef, 0x6b, 0x05, 0x45, 0x36, 0x76, 0x0e, 0xd7, 0xc3, 0x4b, 0x7e, 0x81, 0xea, 0x8c, 0x61,
	0xf7, 0x51, 0xcb, 0x13, 0x8c, 0xfc, 0x14, 0x00, 0xe5, 0x79, 0x99, 0x51, 0x48, 0xb1, 0x17, 0x92,
	0x04, 0x99, 0xb0, 0x4f, 0xc2, 0x15, 0xf1, 0xa3, 0x98, 0xb8, 0xf6, 0xc3, 0x3e, 0x5d, 0x4c, 0xb1,
	0x1d, 0xdf, 0x3a, 0xe9, 0xf3, 0x8d, 0xb9, 0x7f, 0xf3, 0xae, 0x52, 0xe8, 0x97, 0xac, 0x05, 0x8d,
	0xa0, 0xc5, 0x7c, 0xb2, 0xcf, 0xbd, 0xf0, 0x66, 0xe3, 0xf2, 0x50, 0x7b, 0x7c, 0x1d, 0x33, 0x3b,
	0x5f, 0x77, 0xad, 0xad, 0x82, 0x9f, 0x13, 0x1d, 0x13, 0x76, 0x7e, 0x2b, 0x3f, 0xc1, 0xe6, 0x31,
	0x88, 0xd3, 0xc5, 0x15, 0x42, 0x50, 0x8d, 0x9c, 0x34, 0xdb, 0x0c, 0x3f, 0x33, 0x31, 0x27, 0xf1,
	0xf9, 0x87, 0x92, 0xc5, 0x8e, 0x07, 0xdf, 0x84, 0xc2, 0x0f, 0x78, 0xee, 0xf9, 0x04, 0x8d, 0x60,
	0xef, 0x21, 0x04, 0x27, 0x1b, 0x9b, 0xcb, 0xb4, 0xf4, 0xbd, 0x3f, 0x38, 0xb2, 0x50, 0xfa, 0x38,
	0xd4, 0xff, 0x01, 0xf2, 0x9d, 0xa7, 0x9b, 0x38, 0xa4, 0xe2, 0xd2, 0xad, 0x42, 0xfd, 0xc8, 0x01,
	0x71, 0x66, 0x98, 0x68, 0x17, 0xe4, 0x8b, 0x99, 0x61, 0xda, 0xf3, 0x0b, 0x43, 0xb7, 0xf5, 0xe1,
	0xa9, 0xb2, 0x55, 0xa6, 0x86, 0x7d, 0x5d, 0x11, 0x8a, 0xd4, 0x80, 0x77, 0x55, 0xca, 0x14, 0xeb,
	0x12, 0x91, 0x02, 0xd2, 0xe5, 0xfb, 0xe9, 0xa7, 0xfe, 0xe0, 0x64, 0x68, 0x1b, 0xe3, 0xb9, 0x52,
	0x3d, 0x7a, 0x03, 0x72, 0xe9, 0x75, 0x40, 0x12, 0x34, 0x0a, 0x37, 0x65, 0x68, 0x7d, 0xc9, 0x1a,
	0x65, 0xfa, 0x19, 0xe2, 0xd2, 0x47, 0xcf, 0xa0, 0x5d, 0xfe, 0xbd, 0x59, 0xdd, 0x18, 0x5d, 0x19,
	0xef, 0xcc, 0xf1, 0x48, 0xd9, 0x42, 0x32, 0x34, 0x3f, 0x7c, 0x34, 0xa6, 0x93, 0xf3, 0xc9, 0x78,
	0xa4, 0x08, 0xaf, 0xe1, 0x73, 0x63, 0x45, 0x12, 0xef, 0xda, 0x23, 0xc9, 0x97, 0x1a, 0x7f, 0xf6,
	0x06, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xa0, 0xf3, 0x08, 0x09, 0x05, 0x00, 0x00,
}
